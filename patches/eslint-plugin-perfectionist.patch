diff --git a/dist/package.json.js b/dist/package.json.js
index fde0c13724b2ed65bddddd787b34ea62856643e6..8ad789a663bb43094d627c4b2766e152ed9a59f4 100644
--- a/dist/package.json.js
+++ b/dist/package.json.js
@@ -1,6 +1,6 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
 const name = 'eslint-plugin-perfectionist'
-const version = '4.12.3'
+const version = '4.13.0'
 exports.name = name
 exports.version = version
diff --git a/dist/rules/sort-classes.js b/dist/rules/sort-classes.js
index dc91a0ee3dbc013486e15ebcea8562c0d792ab9e..dba3ff0e3d93cb490124d793b5a6044402dccc8c 100644
--- a/dist/rules/sort-classes.js
+++ b/dist/rules/sort-classes.js
@@ -18,7 +18,7 @@ const createEslintRule = require('../utils/create-eslint-rule.js')
 const getDecoratorName = require('../utils/get-decorator-name.js')
 const reportAllErrors = require('../utils/report-all-errors.js')
 const shouldPartition = require('../utils/should-partition.js')
-const getGroupNumber = require('../utils/get-group-number.js')
+const getGroupIndex = require('../utils/get-group-index.js')
 const computeGroup = require('../utils/compute-group.js')
 const rangeToDiff = require('../utils/range-to-diff.js')
 const getSettings = require('../utils/get-settings.js')
@@ -474,7 +474,7 @@ const sortClasses = createEslintRule.createEslintRule({
         let nodesSortedByGroups = formattedNodes.flatMap(nodes2 =>
           sortNodesByGroups.sortNodesByGroups({
             isNodeIgnored: sortingNode =>
-              getGroupNumber.getGroupNumber(options.groups, sortingNode) ===
+              getGroupIndex.getGroupIndex(options.groups, sortingNode) ===
               options.groups.length,
             getOptionsByGroupNumber:
               getCustomGroupsCompareOptions.buildGetCustomGroupOverriddenOptionsFunction(
diff --git a/dist/rules/sort-decorators.js b/dist/rules/sort-decorators.js
index e75f4247b08db050c3d1366e1be29b14c5d5da83..ce3fa511b5565b8dd45825e288c95cd8f50a288e 100644
--- a/dist/rules/sort-decorators.js
+++ b/dist/rules/sort-decorators.js
@@ -1,7 +1,7 @@
 'use strict'
 const commonJsonSchemas = require('../utils/common-json-schemas.js')
+const validateGeneratedGroupsConfiguration = require('../utils/validate-generated-groups-configuration.js')
 const validateCustomSortConfiguration = require('../utils/validate-custom-sort-configuration.js')
-const validateGroupsConfiguration = require('../utils/validate-groups-configuration.js')
 const getEslintDisabledLines = require('../utils/get-eslint-disabled-lines.js')
 const isNodeEslintDisabled = require('../utils/is-node-eslint-disabled.js')
 const reportErrors = require('../utils/report-errors.js')
@@ -42,9 +42,9 @@ const sortDecorators = createEslintRule.createEslintRule({
       defaultOptions,
     )
     validateCustomSortConfiguration.validateCustomSortConfiguration(options)
-    validateGroupsConfiguration.validateGroupsConfiguration({
-      allowedCustomGroups: Object.keys(options.customGroups),
-      allowedPredefinedGroups: ['unknown'],
+    validateGeneratedGroupsConfiguration.validateGeneratedGroupsConfiguration({
+      selectors: [],
+      modifiers: [],
       options,
     })
     return {
@@ -129,7 +129,7 @@ const sortDecorators = createEslintRule.createEslintRule({
             type: 'boolean',
           },
           partitionByComment: commonJsonSchemas.partitionByCommentJsonSchema,
-          customGroups: commonJsonSchemas.customGroupsJsonSchema,
+          customGroups: commonJsonSchemas.deprecatedCustomGroupsJsonSchema,
           groups: commonJsonSchemas.groupsJsonSchema,
         },
         additionalProperties: false,
diff --git a/dist/rules/sort-enums.js b/dist/rules/sort-enums.js
index a33ace5353c4e341fbb2f05d4007c19c4f0d8e81..d246bf228c4826d3f4cdc9b06abf60cf70b1163e 100644
--- a/dist/rules/sort-enums.js
+++ b/dist/rules/sort-enums.js
@@ -221,19 +221,19 @@ const sortEnums = createEslintRule.createEslintRule({
       {
         properties: {
           ...commonJsonSchemas.commonJsonSchemas,
-          forceNumericSort: {
-            description:
-              'Will always sort numeric enums by their value regardless of the sort type specified.',
-            type: 'boolean',
-          },
           customGroups: {
             oneOf: [
-              commonJsonSchemas.customGroupsJsonSchema,
+              commonJsonSchemas.deprecatedCustomGroupsJsonSchema,
               commonJsonSchemas.buildCustomGroupsArrayJsonSchema({
                 singleCustomGroupJsonSchema: types.singleCustomGroupJsonSchema,
               }),
             ],
           },
+          forceNumericSort: {
+            description:
+              'Will always sort numeric enums by their value regardless of the sort type specified.',
+            type: 'boolean',
+          },
           sortByValue: {
             description: 'Compare enum values instead of names.',
             type: 'boolean',
diff --git a/dist/rules/sort-heritage-clauses.js b/dist/rules/sort-heritage-clauses.js
index 5e0272c365207dfcc8e9463599197d7ed6b0ddaf..853f4b745d038beaf7e30d20207bf3852b228ae8 100644
--- a/dist/rules/sort-heritage-clauses.js
+++ b/dist/rules/sort-heritage-clauses.js
@@ -1,7 +1,7 @@
 'use strict'
 const commonJsonSchemas = require('../utils/common-json-schemas.js')
+const validateGeneratedGroupsConfiguration = require('../utils/validate-generated-groups-configuration.js')
 const validateCustomSortConfiguration = require('../utils/validate-custom-sort-configuration.js')
-const validateGroupsConfiguration = require('../utils/validate-groups-configuration.js')
 const getEslintDisabledLines = require('../utils/get-eslint-disabled-lines.js')
 const isNodeEslintDisabled = require('../utils/is-node-eslint-disabled.js')
 const reportErrors = require('../utils/report-errors.js')
@@ -30,7 +30,7 @@ const sortHeritageClauses = createEslintRule.createEslintRule({
       {
         properties: {
           ...commonJsonSchemas.commonJsonSchemas,
-          customGroups: commonJsonSchemas.customGroupsJsonSchema,
+          customGroups: commonJsonSchemas.deprecatedCustomGroupsJsonSchema,
           groups: commonJsonSchemas.groupsJsonSchema,
         },
         additionalProperties: false,
@@ -57,9 +57,9 @@ const sortHeritageClauses = createEslintRule.createEslintRule({
       defaultOptions,
     )
     validateCustomSortConfiguration.validateCustomSortConfiguration(options)
-    validateGroupsConfiguration.validateGroupsConfiguration({
-      allowedCustomGroups: Object.keys(options.customGroups),
-      allowedPredefinedGroups: ['unknown'],
+    validateGeneratedGroupsConfiguration.validateGeneratedGroupsConfiguration({
+      selectors: [],
+      modifiers: [],
       options,
     })
     return {
diff --git a/dist/rules/sort-imports/read-closest-ts-config-by-path.js b/dist/rules/sort-imports/read-closest-ts-config-by-path.js
index 3bdfccbbab3f2bc9d8365f6324879bbb642a8785..c95b7827c5e1e953fb263ec57768bb70924ec368 100644
--- a/dist/rules/sort-imports/read-closest-ts-config-by-path.js
+++ b/dist/rules/sort-imports/read-closest-ts-config-by-path.js
@@ -29,15 +29,20 @@ const path__namespace = /* @__PURE__ */ _interopNamespaceDefault(path)
 const fs__namespace = /* @__PURE__ */ _interopNamespaceDefault(fs)
 let directoryCacheByPath = /* @__PURE__ */ new Map()
 let contentCacheByPath = /* @__PURE__ */ new Map()
-let readClosestTsConfigByPath = input => {
+let readClosestTsConfigByPath = ({
+  tsconfigFilename,
+  tsconfigRootDir,
+  contextCwd,
+  filePath,
+}) => {
   let typescriptImport = getTypescriptImport.getTypescriptImport()
   if (!typescriptImport) {
     return null
   }
-  let directory = path__namespace.dirname(input.filePath)
+  let directory = path__namespace.dirname(filePath)
   let checkedDirectories = [directory]
   do {
-    let tsconfigPath = path__namespace.join(directory, 'tsconfig.json')
+    let tsconfigPath = path__namespace.join(directory, tsconfigFilename)
     let cachedDirectory = directoryCacheByPath.get(directory)
     if (!cachedDirectory && fs__namespace.existsSync(tsconfigPath)) {
       cachedDirectory = tsconfigPath
@@ -46,20 +51,13 @@ let readClosestTsConfigByPath = input => {
       for (let checkedDirectory of checkedDirectories) {
         directoryCacheByPath.set(checkedDirectory, cachedDirectory)
       }
-      return getCompilerOptions(
-        typescriptImport,
-        input.contextCwd,
-        cachedDirectory,
-      )
+      return getCompilerOptions(typescriptImport, contextCwd, cachedDirectory)
     }
     directory = path__namespace.dirname(directory)
     checkedDirectories.push(directory)
-  } while (
-    directory.length > 1 &&
-    directory.length >= input.tsconfigRootDir.length
-  )
+  } while (directory.length > 1 && directory.length >= tsconfigRootDir.length)
   throw new Error(
-    `Couldn't find any tsconfig.json relative to '${input.filePath}' within '${input.tsconfigRootDir}'.`,
+    `Couldn't find any tsconfig.json relative to '${filePath}' within '${tsconfigRootDir}'.`,
   )
 }
 let getCompilerOptions = (typescriptImport, contextCwd, filePath) => {
diff --git a/dist/rules/sort-imports.js b/dist/rules/sort-imports.js
index 2efa1f70842d32986edc3c43b52e17ca47a0f3a2..eed5dd2a7d8b7d8cf33df438414a762f6b162b6b 100644
--- a/dist/rules/sort-imports.js
+++ b/dist/rules/sort-imports.js
@@ -26,38 +26,39 @@ const getSettings = require('../utils/get-settings.js')
 const isSortable = require('../utils/is-sortable.js')
 const complete = require('../utils/complete.js')
 let cachedGroupsByModifiersAndSelectors = /* @__PURE__ */ new Map()
-let defaultGroups = [
-  'type-import',
-  ['value-builtin', 'value-external'],
-  'type-internal',
-  'value-internal',
-  ['type-parent', 'type-sibling', 'type-index'],
-  ['value-parent', 'value-sibling', 'value-index'],
-  'ts-equals-import',
-  'unknown',
-]
+let defaultOptions = {
+  groups: [
+    'type-import',
+    ['value-builtin', 'value-external'],
+    'type-internal',
+    'value-internal',
+    ['type-parent', 'type-sibling', 'type-index'],
+    ['value-parent', 'value-sibling', 'value-index'],
+    'ts-equals-import',
+    'unknown',
+  ],
+  internalPattern: ['^~/.+', '^@/.+'],
+  fallbackSort: { type: 'unsorted' },
+  partitionByComment: false,
+  partitionByNewLine: false,
+  newlinesBetween: 'always',
+  specialCharacters: 'keep',
+  sortSideEffects: false,
+  type: 'alphabetical',
+  environment: 'node',
+  customGroups: [],
+  ignoreCase: true,
+  locales: 'en-US',
+  alphabet: '',
+  order: 'asc',
+}
 const sortImports = createEslintRule.createEslintRule({
   create: context => {
+    var _a, _b
     let settings = getSettings.getSettings(context.settings)
     let userOptions = context.options.at(0)
     let options = getOptionsWithCleanGroups.getOptionsWithCleanGroups(
-      complete.complete(userOptions, settings, {
-        fallbackSort: { type: 'unsorted' },
-        internalPattern: ['^~/.+'],
-        partitionByComment: false,
-        partitionByNewLine: false,
-        newlinesBetween: 'always',
-        specialCharacters: 'keep',
-        sortSideEffects: false,
-        groups: defaultGroups,
-        type: 'alphabetical',
-        environment: 'node',
-        customGroups: [],
-        ignoreCase: true,
-        locales: 'en-US',
-        alphabet: '',
-        order: 'asc',
-      }),
+      complete.complete(userOptions, settings, defaultOptions),
     )
     validateGeneratedGroupsConfiguration.validateGeneratedGroupsConfiguration({
       options: {
@@ -77,9 +78,15 @@ const sortImports = createEslintRule.createEslintRule({
       options,
     )
     validateSideEffectsConfiguration.validateSideEffectsConfiguration(options)
-    let tsConfigOutput = options.tsconfigRootDir
+    let tsconfigRootDirectory =
+      ((_a = options.tsconfig) == null ? void 0 : _a.rootDir) ??
+      options.tsconfigRootDir
+    let tsConfigOutput = tsconfigRootDirectory
       ? readClosestTsConfigByPath.readClosestTsConfigByPath({
-          tsconfigRootDir: options.tsconfigRootDir,
+          tsconfigFilename:
+            ((_b = options.tsconfig) == null ? void 0 : _b.filename) ??
+            'tsconfig.json',
+          tsconfigRootDir: tsconfigRootDirectory,
           filePath: context.physicalFilename,
           contextCwd: context.cwd,
         })
@@ -322,15 +329,15 @@ const sortImports = createEslintRule.createEslintRule({
         }
       },
       VariableDeclaration: node => {
-        var _a
+        var _a2
         if (
           node.declarations[0].init &&
           node.declarations[0].init.type === 'CallExpression' &&
           node.declarations[0].init.callee.type === 'Identifier' &&
           node.declarations[0].init.callee.name === 'require' &&
-          ((_a = node.declarations[0].init.arguments[0]) == null
+          ((_a2 = node.declarations[0].init.arguments[0]) == null
             ? void 0
-            : _a.type) === 'Literal'
+            : _a2.type) === 'Literal'
         ) {
           registerNode(node)
         }
@@ -349,12 +356,12 @@ const sortImports = createEslintRule.createEslintRule({
               {
                 properties: {
                   value: {
+                    ...commonJsonSchemas.deprecatedCustomGroupsJsonSchema,
                     description: 'Specifies custom groups for value imports.',
-                    type: 'object',
                   },
                   type: {
+                    ...commonJsonSchemas.deprecatedCustomGroupsJsonSchema,
                     description: 'Specifies custom groups for type imports.',
-                    type: 'object',
                   },
                 },
                 description: 'Specifies custom groups.',
@@ -366,6 +373,21 @@ const sortImports = createEslintRule.createEslintRule({
               }),
             ],
           },
+          tsconfig: {
+            properties: {
+              rootDir: {
+                description: 'Specifies the tsConfig root directory.',
+                type: 'string',
+              },
+              filename: {
+                description: 'Specifies the tsConfig filename.',
+                type: 'string',
+              },
+            },
+            additionalProperties: false,
+            required: ['rootDir'],
+            type: 'object',
+          },
           maxLineLength: {
             description: 'Specifies the maximum line length.',
             exclusiveMinimum: true,
@@ -392,41 +414,9 @@ const sortImports = createEslintRule.createEslintRule({
           internalPattern: commonJsonSchemas.regexJsonSchema,
           groups: commonJsonSchemas.groupsJsonSchema,
         },
-        allOf: [
-          {
-            $ref: '#/definitions/max-line-length-requires-line-length-type',
-          },
-        ],
-        dependencies: {
-          maxLineLength: ['type'],
-        },
         additionalProperties: false,
         type: 'object',
       },
-      definitions: {
-        'max-line-length-requires-line-length-type': {
-          anyOf: [
-            {
-              not: {
-                required: ['maxLineLength'],
-                type: 'object',
-              },
-              type: 'object',
-            },
-            {
-              $ref: '#/definitions/is-line-length',
-            },
-          ],
-        },
-        'is-line-length': {
-          properties: {
-            type: { enum: ['line-length'], type: 'string' },
-          },
-          required: ['type'],
-          type: 'object',
-        },
-      },
-      id: 'sort-imports',
       uniqueItems: true,
       type: 'array',
     },
@@ -445,24 +435,7 @@ const sortImports = createEslintRule.createEslintRule({
     type: 'suggestion',
     fixable: 'code',
   },
-  defaultOptions: [
-    {
-      customGroups: { value: {}, type: {} },
-      internalPattern: ['^~/.+'],
-      partitionByComment: false,
-      partitionByNewLine: false,
-      specialCharacters: 'keep',
-      newlinesBetween: 'always',
-      sortSideEffects: false,
-      groups: defaultGroups,
-      type: 'alphabetical',
-      environment: 'node',
-      ignoreCase: true,
-      locales: 'en-US',
-      alphabet: '',
-      order: 'asc',
-    },
-  ],
+  defaultOptions: [defaultOptions],
   name: 'sort-imports',
 })
 let hasContentBetweenNodes = (sourceCode, left, right) =>
diff --git a/dist/rules/sort-intersection-types.js b/dist/rules/sort-intersection-types.js
index 90ec415e18a1159a1e0e0ddaa0165b3208816b95..6bce1f3dc31a9442487f40bc8d8d8905f60c931b 100644
--- a/dist/rules/sort-intersection-types.js
+++ b/dist/rules/sort-intersection-types.js
@@ -11,6 +11,7 @@ let defaultOptions = {
   type: 'alphabetical',
   ignoreCase: true,
   locales: 'en-US',
+  customGroups: [],
   alphabet: '',
   order: 'asc',
   groups: [],
@@ -28,7 +29,7 @@ const sortIntersectionTypes = createEslintRule.createEslintRule({
       description: 'Enforce sorted intersection types.',
       recommended: true,
     },
-    schema: [sortUnionTypes.jsonSchema],
+    schema: sortUnionTypes.jsonSchema,
     type: 'suggestion',
     fixable: 'code',
   },
diff --git a/dist/rules/sort-jsx-props.js b/dist/rules/sort-jsx-props.js
index 1ee4990e72d7b0b75cf98b57c85bf16ccd94e205..910c1e8c6ba97f0989d7abf06fa927022579f417 100644
--- a/dist/rules/sort-jsx-props.js
+++ b/dist/rules/sort-jsx-props.js
@@ -205,7 +205,7 @@ const sortJsxProps = createEslintRule.createEslintRule({
           ...commonJsonSchemas.commonJsonSchemas,
           customGroups: {
             oneOf: [
-              commonJsonSchemas.customGroupsJsonSchema,
+              commonJsonSchemas.deprecatedCustomGroupsJsonSchema,
               commonJsonSchemas.buildCustomGroupsArrayJsonSchema({
                 singleCustomGroupJsonSchema: types.singleCustomGroupJsonSchema,
               }),
diff --git a/dist/rules/sort-modules.js b/dist/rules/sort-modules.js
index aa4894e7bc7487086663b47ef4b36b7c8abc8f5c..b9f78589d47d987421604691cd2cfdbaab283067 100644
--- a/dist/rules/sort-modules.js
+++ b/dist/rules/sort-modules.js
@@ -18,8 +18,8 @@ const createEslintRule = require('../utils/create-eslint-rule.js')
 const getDecoratorName = require('../utils/get-decorator-name.js')
 const reportAllErrors = require('../utils/report-all-errors.js')
 const shouldPartition = require('../utils/should-partition.js')
-const getGroupNumber = require('../utils/get-group-number.js')
 const getEnumMembers = require('../utils/get-enum-members.js')
+const getGroupIndex = require('../utils/get-group-index.js')
 const computeGroup = require('../utils/compute-group.js')
 const rangeToDiff = require('../utils/range-to-diff.js')
 const getSettings = require('../utils/get-settings.js')
@@ -284,7 +284,7 @@ let analyzeModule = ({
     let nodesSortedByGroups = formattedNodes.flatMap(nodes2 =>
       sortNodesByGroups.sortNodesByGroups({
         isNodeIgnored: sortingNode =>
-          getGroupNumber.getGroupNumber(options.groups, sortingNode) ===
+          getGroupIndex.getGroupIndex(options.groups, sortingNode) ===
           options.groups.length,
         getOptionsByGroupNumber:
           getCustomGroupsCompareOptions.buildGetCustomGroupOverriddenOptionsFunction(
diff --git a/dist/rules/sort-object-types.js b/dist/rules/sort-object-types.js
index 525c425894fd299b20d506b744414f0eea6d693e..8e0aa5a40b56a021e50209c9e3a03eab76d73661 100644
--- a/dist/rules/sort-object-types.js
+++ b/dist/rules/sort-object-types.js
@@ -50,11 +50,13 @@ let jsonSchema = {
   items: {
     properties: {
       ...commonJsonSchemas.buildCommonJsonSchemas({
-        additionalFallbackSortProperties: {},
+        additionalFallbackSortProperties: {
+          sortBy: types.sortByJsonSchema,
+        },
       }),
       customGroups: {
         oneOf: [
-          commonJsonSchemas.customGroupsJsonSchema,
+          commonJsonSchemas.deprecatedCustomGroupsJsonSchema,
           commonJsonSchemas.buildCustomGroupsArrayJsonSchema({
             additionalFallbackSortProperties: {
               sortBy: types.sortByJsonSchema,
diff --git a/dist/rules/sort-objects.js b/dist/rules/sort-objects.js
index fb970f8de82f4f504654e9e0582088b0f8f94bb8..2ed958c4e11786c332199a616c430d1ad07e5179 100644
--- a/dist/rules/sort-objects.js
+++ b/dist/rules/sort-objects.js
@@ -382,7 +382,7 @@ const sortObjects = createEslintRule.createEslintRule({
           },
           customGroups: {
             oneOf: [
-              commonJsonSchemas.customGroupsJsonSchema,
+              commonJsonSchemas.deprecatedCustomGroupsJsonSchema,
               commonJsonSchemas.buildCustomGroupsArrayJsonSchema({
                 singleCustomGroupJsonSchema: types.singleCustomGroupJsonSchema,
               }),
diff --git a/dist/rules/sort-union-types/types.js b/dist/rules/sort-union-types/types.js
new file mode 100644
index 0000000000000000000000000000000000000000..1d60e4043547f8ee63767d1fc89c8b320ab4e7b9
--- /dev/null
+++ b/dist/rules/sort-union-types/types.js
@@ -0,0 +1,23 @@
+'use strict'
+Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
+const commonJsonSchemas = require('../../utils/common-json-schemas.js')
+let allSelectors = [
+  'intersection',
+  'conditional',
+  'function',
+  'operator',
+  'keyword',
+  'literal',
+  'nullish',
+  'import',
+  'object',
+  'named',
+  'tuple',
+  'union',
+]
+let singleCustomGroupJsonSchema = {
+  selector: commonJsonSchemas.buildCustomGroupSelectorJsonSchema(allSelectors),
+  elementNamePattern: commonJsonSchemas.regexJsonSchema,
+}
+exports.allSelectors = allSelectors
+exports.singleCustomGroupJsonSchema = singleCustomGroupJsonSchema
diff --git a/dist/rules/sort-union-types.js b/dist/rules/sort-union-types.js
index 764906159c816f6a08ee7b61b2f18dabdcab912d..d7f005ba0cd1fc863aca007d3743e6cc50151986 100644
--- a/dist/rules/sort-union-types.js
+++ b/dist/rules/sort-union-types.js
@@ -6,10 +6,14 @@ Object.defineProperties(exports, {
 const commonJsonSchemas = require('../utils/common-json-schemas.js')
 const reportErrors = require('../utils/report-errors.js')
 const validateNewlinesAndPartitionConfiguration = require('../utils/validate-newlines-and-partition-configuration.js')
+const getCustomGroupsCompareOptions = require('../utils/get-custom-groups-compare-options.js')
+const validateGeneratedGroupsConfiguration = require('../utils/validate-generated-groups-configuration.js')
 const validateCustomSortConfiguration = require('../utils/validate-custom-sort-configuration.js')
-const validateGroupsConfiguration = require('../utils/validate-groups-configuration.js')
+const generatePredefinedGroups = require('../utils/generate-predefined-groups.js')
 const getEslintDisabledLines = require('../utils/get-eslint-disabled-lines.js')
 const isNodeEslintDisabled = require('../utils/is-node-eslint-disabled.js')
+const doesCustomGroupMatch = require('../utils/does-custom-group-match.js')
+const types = require('./sort-union-types/types.js')
 const sortNodesByGroups = require('../utils/sort-nodes-by-groups.js')
 const createEslintRule = require('../utils/create-eslint-rule.js')
 const reportAllErrors = require('../utils/report-all-errors.js')
@@ -18,6 +22,7 @@ const computeGroup = require('../utils/compute-group.js')
 const rangeToDiff = require('../utils/range-to-diff.js')
 const getSettings = require('../utils/get-settings.js')
 const complete = require('../utils/complete.js')
+let cachedGroupsByModifiersAndSelectors = /* @__PURE__ */ new Map()
 let defaultOptions = {
   fallbackSort: { type: 'unsorted' },
   specialCharacters: 'keep',
@@ -27,20 +32,28 @@ let defaultOptions = {
   type: 'alphabetical',
   ignoreCase: true,
   locales: 'en-US',
+  customGroups: [],
   alphabet: '',
   order: 'asc',
   groups: [],
 }
 let jsonSchema = {
-  properties: {
-    ...commonJsonSchemas.commonJsonSchemas,
-    partitionByComment: commonJsonSchemas.partitionByCommentJsonSchema,
-    partitionByNewLine: commonJsonSchemas.partitionByNewLineJsonSchema,
-    newlinesBetween: commonJsonSchemas.newlinesBetweenJsonSchema,
-    groups: commonJsonSchemas.groupsJsonSchema,
+  items: {
+    properties: {
+      ...commonJsonSchemas.commonJsonSchemas,
+      customGroups: commonJsonSchemas.buildCustomGroupsArrayJsonSchema({
+        singleCustomGroupJsonSchema: types.singleCustomGroupJsonSchema,
+      }),
+      partitionByComment: commonJsonSchemas.partitionByCommentJsonSchema,
+      partitionByNewLine: commonJsonSchemas.partitionByNewLineJsonSchema,
+      newlinesBetween: commonJsonSchemas.newlinesBetweenJsonSchema,
+      groups: commonJsonSchemas.groupsJsonSchema,
+    },
+    additionalProperties: false,
+    type: 'object',
   },
-  additionalProperties: false,
-  type: 'object',
+  uniqueItems: true,
+  type: 'array',
 }
 const sortUnionTypes = createEslintRule.createEslintRule({
   create: context => ({
@@ -70,7 +83,7 @@ const sortUnionTypes = createEslintRule.createEslintRule({
       description: 'Enforce sorted union types.',
       recommended: true,
     },
-    schema: [jsonSchema],
+    schema: jsonSchema,
     type: 'suggestion',
     fixable: 'code',
   },
@@ -90,23 +103,9 @@ let sortUnionOrIntersectionTypes = ({
     defaultOptions,
   )
   validateCustomSortConfiguration.validateCustomSortConfiguration(options)
-  validateGroupsConfiguration.validateGroupsConfiguration({
-    allowedPredefinedGroups: [
-      'intersection',
-      'conditional',
-      'function',
-      'operator',
-      'keyword',
-      'literal',
-      'nullish',
-      'unknown',
-      'import',
-      'object',
-      'named',
-      'tuple',
-      'union',
-    ],
-    allowedCustomGroups: [],
+  validateGeneratedGroupsConfiguration.validateGeneratedGroupsConfiguration({
+    selectors: types.allSelectors,
+    modifiers: [],
     options,
   })
   validateNewlinesAndPartitionConfiguration.validateNewlinesAndPartitionConfiguration(
@@ -119,33 +118,33 @@ let sortUnionOrIntersectionTypes = ({
   })
   let formattedMembers = node.types.reduce(
     (accumulator, type) => {
-      let predefinedGroups = []
+      let selectors = []
       switch (type.type) {
         case 'TSTemplateLiteralType':
         case 'TSLiteralType':
-          predefinedGroups.push('literal')
+          selectors.push('literal')
           break
         case 'TSIndexedAccessType':
         case 'TSTypeReference':
         case 'TSQualifiedName':
         case 'TSArrayType':
         case 'TSInferType':
-          predefinedGroups.push('named')
+          selectors.push('named')
           break
         case 'TSIntersectionType':
-          predefinedGroups.push('intersection')
+          selectors.push('intersection')
           break
         case 'TSUndefinedKeyword':
         case 'TSNullKeyword':
         case 'TSVoidKeyword':
-          predefinedGroups.push('nullish')
+          selectors.push('nullish')
           break
         case 'TSConditionalType':
-          predefinedGroups.push('conditional')
+          selectors.push('conditional')
           break
         case 'TSConstructorType':
         case 'TSFunctionType':
-          predefinedGroups.push('function')
+          selectors.push('function')
           break
         case 'TSBooleanKeyword':
         case 'TSUnknownKeyword':
@@ -157,27 +156,40 @@ let sortUnionOrIntersectionTypes = ({
         case 'TSNeverKeyword':
         case 'TSAnyKeyword':
         case 'TSThisType':
-          predefinedGroups.push('keyword')
+          selectors.push('keyword')
           break
         case 'TSTypeOperator':
         case 'TSTypeQuery':
-          predefinedGroups.push('operator')
+          selectors.push('operator')
           break
         case 'TSTypeLiteral':
         case 'TSMappedType':
-          predefinedGroups.push('object')
+          selectors.push('object')
           break
         case 'TSImportType':
-          predefinedGroups.push('import')
+          selectors.push('import')
           break
         case 'TSTupleType':
-          predefinedGroups.push('tuple')
+          selectors.push('tuple')
           break
         case 'TSUnionType':
-          predefinedGroups.push('union')
+          selectors.push('union')
           break
       }
+      let name = sourceCode.getText(type)
+      let predefinedGroups = generatePredefinedGroups.generatePredefinedGroups({
+        cache: cachedGroupsByModifiersAndSelectors,
+        modifiers: [],
+        selectors,
+      })
       let group = computeGroup.computeGroup({
+        customGroupMatcher: customGroup =>
+          doesCustomGroupMatch.doesCustomGroupMatch({
+            elementName: name,
+            modifiers: [],
+            customGroup,
+            selectors,
+          }),
         predefinedGroups,
         options,
       })
@@ -189,9 +201,9 @@ let sortUnionOrIntersectionTypes = ({
           eslintDisabledLines,
         ),
         size: rangeToDiff.rangeToDiff(type, sourceCode),
-        name: sourceCode.getText(type),
         node: type,
         group,
+        name,
       }
       if (
         shouldPartition.shouldPartition({
@@ -213,7 +225,10 @@ let sortUnionOrIntersectionTypes = ({
   for (let nodes of formattedMembers) {
     let sortNodesExcludingEslintDisabled = ignoreEslintDisabledNodes =>
       sortNodesByGroups.sortNodesByGroups({
-        getOptionsByGroupNumber: () => ({ options }),
+        getOptionsByGroupNumber:
+          getCustomGroupsCompareOptions.buildGetCustomGroupOverriddenOptionsFunction(
+            options,
+          ),
         ignoreEslintDisabledNodes,
         groups: options.groups,
         nodes,
diff --git a/dist/rules/sort-variable-declarations/types.js b/dist/rules/sort-variable-declarations/types.js
new file mode 100644
index 0000000000000000000000000000000000000000..33707ecc0c8b4b2a93189ff0dfe170e37d642c25
--- /dev/null
+++ b/dist/rules/sort-variable-declarations/types.js
@@ -0,0 +1,10 @@
+'use strict'
+Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
+const commonJsonSchemas = require('../../utils/common-json-schemas.js')
+let allSelectors = ['initialized', 'uninitialized']
+let singleCustomGroupJsonSchema = {
+  selector: commonJsonSchemas.buildCustomGroupSelectorJsonSchema(allSelectors),
+  elementNamePattern: commonJsonSchemas.regexJsonSchema,
+}
+exports.allSelectors = allSelectors
+exports.singleCustomGroupJsonSchema = singleCustomGroupJsonSchema
diff --git a/dist/rules/sort-variable-declarations.js b/dist/rules/sort-variable-declarations.js
index 41bdea541cc927544999e897934fefda6ef3eb10..4c72a1366ae062b7a72d59ff4150ec93b16cf6b8 100644
--- a/dist/rules/sort-variable-declarations.js
+++ b/dist/rules/sort-variable-declarations.js
@@ -1,28 +1,38 @@
 'use strict'
 const commonJsonSchemas = require('../utils/common-json-schemas.js')
+const reportErrors = require('../utils/report-errors.js')
+const validateNewlinesAndPartitionConfiguration = require('../utils/validate-newlines-and-partition-configuration.js')
+const getCustomGroupsCompareOptions = require('../utils/get-custom-groups-compare-options.js')
 const validateCustomSortConfiguration = require('../utils/validate-custom-sort-configuration.js')
+const types = require('./sort-variable-declarations/types.js')
+const generatePredefinedGroups = require('../utils/generate-predefined-groups.js')
 const sortNodesByDependencies = require('../utils/sort-nodes-by-dependencies.js')
-const reportErrors = require('../utils/report-errors.js')
 const getEslintDisabledLines = require('../utils/get-eslint-disabled-lines.js')
 const isNodeEslintDisabled = require('../utils/is-node-eslint-disabled.js')
+const doesCustomGroupMatch = require('../utils/does-custom-group-match.js')
+const sortNodesByGroups = require('../utils/sort-nodes-by-groups.js')
 const createEslintRule = require('../utils/create-eslint-rule.js')
 const reportAllErrors = require('../utils/report-all-errors.js')
 const shouldPartition = require('../utils/should-partition.js')
+const computeGroup = require('../utils/compute-group.js')
 const rangeToDiff = require('../utils/range-to-diff.js')
 const getSettings = require('../utils/get-settings.js')
 const isSortable = require('../utils/is-sortable.js')
-const sortNodes = require('../utils/sort-nodes.js')
 const complete = require('../utils/complete.js')
+let cachedGroupsByModifiersAndSelectors = /* @__PURE__ */ new Map()
 let defaultOptions = {
   fallbackSort: { type: 'unsorted' },
   specialCharacters: 'keep',
   partitionByNewLine: false,
   partitionByComment: false,
+  newlinesBetween: 'ignore',
   type: 'alphabetical',
+  customGroups: [],
   ignoreCase: true,
   locales: 'en-US',
   alphabet: '',
   order: 'asc',
+  groups: [],
 }
 const sortVariableDeclarations = createEslintRule.createEslintRule({
   create: context => ({
@@ -37,83 +47,14 @@ const sortVariableDeclarations = createEslintRule.createEslintRule({
         defaultOptions,
       )
       validateCustomSortConfiguration.validateCustomSortConfiguration(options)
+      validateNewlinesAndPartitionConfiguration.validateNewlinesAndPartitionConfiguration(
+        options,
+      )
       let { sourceCode, id } = context
       let eslintDisabledLines = getEslintDisabledLines.getEslintDisabledLines({
         ruleName: id,
         sourceCode,
       })
-      let extractDependencies = init => {
-        let dependencies = []
-        let checkNode = nodeValue => {
-          if (
-            nodeValue.type === 'ArrowFunctionExpression' ||
-            nodeValue.type === 'FunctionExpression'
-          ) {
-            return
-          }
-          if (nodeValue.type === 'Identifier') {
-            dependencies.push(nodeValue.name)
-          }
-          if (nodeValue.type === 'Property') {
-            traverseNode(nodeValue.key)
-            traverseNode(nodeValue.value)
-          }
-          if (nodeValue.type === 'ConditionalExpression') {
-            traverseNode(nodeValue.test)
-            traverseNode(nodeValue.consequent)
-            traverseNode(nodeValue.alternate)
-          }
-          if (
-            'expression' in nodeValue &&
-            typeof nodeValue.expression !== 'boolean'
-          ) {
-            traverseNode(nodeValue.expression)
-          }
-          if ('object' in nodeValue) {
-            traverseNode(nodeValue.object)
-          }
-          if ('callee' in nodeValue) {
-            traverseNode(nodeValue.callee)
-          }
-          if ('left' in nodeValue) {
-            traverseNode(nodeValue.left)
-          }
-          if ('right' in nodeValue) {
-            traverseNode(nodeValue.right)
-          }
-          if ('elements' in nodeValue) {
-            let elements = nodeValue.elements.filter(
-              currentNode => currentNode !== null,
-            )
-            for (let element of elements) {
-              traverseNode(element)
-            }
-          }
-          if ('argument' in nodeValue && nodeValue.argument) {
-            traverseNode(nodeValue.argument)
-          }
-          if ('arguments' in nodeValue) {
-            for (let argument of nodeValue.arguments) {
-              traverseNode(argument)
-            }
-          }
-          if ('properties' in nodeValue) {
-            for (let property of nodeValue.properties) {
-              traverseNode(property)
-            }
-          }
-          if ('expressions' in nodeValue) {
-            for (let nodeExpression of nodeValue.expressions) {
-              traverseNode(nodeExpression)
-            }
-          }
-        }
-        let traverseNode = nodeValue => {
-          checkNode(nodeValue)
-        }
-        traverseNode(init)
-        return dependencies
-      }
       let formattedMembers = node.declarations.reduce(
         (accumulator, declaration) => {
           var _a, _b
@@ -126,13 +67,34 @@ const sortVariableDeclarations = createEslintRule.createEslintRule({
           } else {
             ;({ name } = declaration.id)
           }
+          let selector
           let dependencies = []
           if (declaration.init) {
             dependencies = extractDependencies(declaration.init)
+            selector = 'initialized'
+          } else {
+            selector = 'uninitialized'
           }
+          let predefinedGroups =
+            generatePredefinedGroups.generatePredefinedGroups({
+              cache: cachedGroupsByModifiersAndSelectors,
+              selectors: [selector],
+              modifiers: [],
+            })
           let lastSortingNode =
             (_a = accumulator.at(-1)) == null ? void 0 : _a.at(-1)
           let sortingNode = {
+            group: computeGroup.computeGroup({
+              customGroupMatcher: customGroup =>
+                doesCustomGroupMatch.doesCustomGroupMatch({
+                  selectors: [selector],
+                  elementName: name,
+                  modifiers: [],
+                  customGroup,
+                }),
+              predefinedGroups,
+              options,
+            }),
             isEslintDisabled: isNodeEslintDisabled.isNodeEslintDisabled(
               declaration,
               eslintDisabledLines,
@@ -158,24 +120,35 @@ const sortVariableDeclarations = createEslintRule.createEslintRule({
         },
         [[]],
       )
-      let sortNodesExcludingEslintDisabled = ignoreEslintDisabledNodes =>
-        sortNodesByDependencies.sortNodesByDependencies(
-          formattedMembers.flatMap(nodes2 =>
-            sortNodes.sortNodes({
-              ignoreEslintDisabledNodes,
-              options,
-              nodes: nodes2,
-            }),
-          ),
+      let sortNodesExcludingEslintDisabled = ignoreEslintDisabledNodes => {
+        let nodesSortedByGroups = formattedMembers.flatMap(nodes2 =>
+          sortNodesByGroups.sortNodesByGroups({
+            getOptionsByGroupNumber:
+              getCustomGroupsCompareOptions.buildGetCustomGroupOverriddenOptionsFunction(
+                options,
+              ),
+            ignoreEslintDisabledNodes,
+            groups: options.groups,
+            nodes: nodes2,
+          }),
+        )
+        return sortNodesByDependencies.sortNodesByDependencies(
+          nodesSortedByGroups,
           {
             ignoreEslintDisabledNodes,
           },
         )
+      }
       let nodes = formattedMembers.flat()
       reportAllErrors.reportAllErrors({
         availableMessageIds: {
+          missedSpacingBetweenMembers:
+            'missedSpacingBetweenVariableDeclarationsMembers',
+          extraSpacingBetweenMembers:
+            'extraSpacingBetweenVariableDeclarationsMembers',
           unexpectedDependencyOrder:
             'unexpectedVariableDeclarationsDependencyOrder',
+          unexpectedGroupOrder: 'unexpectedVariableDeclarationsGroupOrder',
           unexpectedOrder: 'unexpectedVariableDeclarationsOrder',
         },
         sortNodesExcludingEslintDisabled,
@@ -191,27 +164,109 @@ const sortVariableDeclarations = createEslintRule.createEslintRule({
       {
         properties: {
           ...commonJsonSchemas.commonJsonSchemas,
+          customGroups: commonJsonSchemas.buildCustomGroupsArrayJsonSchema({
+            singleCustomGroupJsonSchema: types.singleCustomGroupJsonSchema,
+          }),
           partitionByComment: commonJsonSchemas.partitionByCommentJsonSchema,
           partitionByNewLine: commonJsonSchemas.partitionByNewLineJsonSchema,
+          newlinesBetween: commonJsonSchemas.newlinesBetweenJsonSchema,
+          groups: commonJsonSchemas.groupsJsonSchema,
         },
         additionalProperties: false,
         type: 'object',
       },
     ],
-    docs: {
-      url: 'https://perfectionist.dev/rules/sort-variable-declarations',
-      description: 'Enforce sorted variable declarations.',
-      recommended: true,
-    },
     messages: {
+      missedSpacingBetweenVariableDeclarationsMembers:
+        reportErrors.MISSED_SPACING_ERROR,
       unexpectedVariableDeclarationsDependencyOrder:
         reportErrors.DEPENDENCY_ORDER_ERROR,
+      extraSpacingBetweenVariableDeclarationsMembers:
+        reportErrors.EXTRA_SPACING_ERROR,
+      unexpectedVariableDeclarationsGroupOrder: reportErrors.GROUP_ORDER_ERROR,
       unexpectedVariableDeclarationsOrder: reportErrors.ORDER_ERROR,
     },
+    docs: {
+      url: 'https://perfectionist.dev/rules/sort-variable-declarations',
+      description: 'Enforce sorted variable declarations.',
+      recommended: true,
+    },
     type: 'suggestion',
     fixable: 'code',
   },
   name: 'sort-variable-declarations',
   defaultOptions: [defaultOptions],
 })
+let extractDependencies = init => {
+  let dependencies = []
+  let checkNode = nodeValue => {
+    if (
+      nodeValue.type === 'ArrowFunctionExpression' ||
+      nodeValue.type === 'FunctionExpression'
+    ) {
+      return
+    }
+    if (nodeValue.type === 'Identifier') {
+      dependencies.push(nodeValue.name)
+    }
+    if (nodeValue.type === 'Property') {
+      traverseNode(nodeValue.key)
+      traverseNode(nodeValue.value)
+    }
+    if (nodeValue.type === 'ConditionalExpression') {
+      traverseNode(nodeValue.test)
+      traverseNode(nodeValue.consequent)
+      traverseNode(nodeValue.alternate)
+    }
+    if (
+      'expression' in nodeValue &&
+      typeof nodeValue.expression !== 'boolean'
+    ) {
+      traverseNode(nodeValue.expression)
+    }
+    if ('object' in nodeValue) {
+      traverseNode(nodeValue.object)
+    }
+    if ('callee' in nodeValue) {
+      traverseNode(nodeValue.callee)
+    }
+    if ('left' in nodeValue) {
+      traverseNode(nodeValue.left)
+    }
+    if ('right' in nodeValue) {
+      traverseNode(nodeValue.right)
+    }
+    if ('elements' in nodeValue) {
+      let elements = nodeValue.elements.filter(
+        currentNode => currentNode !== null,
+      )
+      for (let element of elements) {
+        traverseNode(element)
+      }
+    }
+    if ('argument' in nodeValue && nodeValue.argument) {
+      traverseNode(nodeValue.argument)
+    }
+    if ('arguments' in nodeValue) {
+      for (let argument of nodeValue.arguments) {
+        traverseNode(argument)
+      }
+    }
+    if ('properties' in nodeValue) {
+      for (let property of nodeValue.properties) {
+        traverseNode(property)
+      }
+    }
+    if ('expressions' in nodeValue) {
+      for (let nodeExpression of nodeValue.expressions) {
+        traverseNode(nodeExpression)
+      }
+    }
+  }
+  let traverseNode = nodeValue => {
+    checkNode(nodeValue)
+  }
+  traverseNode(init)
+  return dependencies
+}
 module.exports = sortVariableDeclarations
diff --git a/dist/utils/common-json-schemas.js b/dist/utils/common-json-schemas.js
index e42446f64e31706449f9ca581ef7228951828297..5f34abe2f1af8126efeb92940a0069f178cedd1f 100644
--- a/dist/utils/common-json-schemas.js
+++ b/dist/utils/common-json-schemas.js
@@ -7,12 +7,13 @@ let typeJsonSchema = {
 }
 let orderJsonSchema = {
   description:
-    'Determines whether the sorted items should be in ascending or descending order.',
+    'Specifies whether to sort items in ascending or descending order.',
   enum: ['asc', 'desc'],
   type: 'string',
 }
 let alphabetJsonSchema = {
-  description: 'Alphabet to use for the `custom` sort type.',
+  description:
+    "Used only when the `type` option is set to `'custom'`. Specifies the custom alphabet for sorting.",
   type: 'string',
 }
 let localesJsonSchema = {
@@ -35,7 +36,7 @@ let ignoreCaseJsonSchema = {
 }
 let specialCharactersJsonSchema = {
   description:
-    'Controls how special characters should be handled before sorting.',
+    'Specifies whether to trim, remove, or keep special characters before sorting.',
   enum: ['remove', 'trim', 'keep'],
   type: 'string',
 }
@@ -46,10 +47,14 @@ let buildFallbackSortJsonSchema = ({ additionalProperties } = {}) => ({
     ...additionalProperties,
   },
   description: 'Fallback sort order.',
+  additionalProperties: false,
+  minProperties: 1,
   type: 'object',
 })
 let buildCommonJsonSchemas = ({ additionalFallbackSortProperties } = {}) => ({
-  fallbackSort: buildFallbackSortJsonSchema(additionalFallbackSortProperties),
+  fallbackSort: buildFallbackSortJsonSchema({
+    additionalProperties: additionalFallbackSortProperties,
+  }),
   specialCharacters: specialCharactersJsonSchema,
   ignoreCase: ignoreCaseJsonSchema,
   alphabet: alphabetJsonSchema,
@@ -59,7 +64,7 @@ let buildCommonJsonSchemas = ({ additionalFallbackSortProperties } = {}) => ({
 })
 let commonJsonSchemas = buildCommonJsonSchemas()
 let newlinesBetweenJsonSchema = {
-  description: 'Specifies how new lines should be handled between groups.',
+  description: 'Specifies how to handle new lines between groups.',
   enum: ['ignore', 'always', 'never'],
   type: 'string',
 }
@@ -79,15 +84,16 @@ let groupsJsonSchema = {
         properties: {
           newlinesBetween: newlinesBetweenJsonSchema,
         },
+        required: ['newlinesBetween'],
         additionalProperties: false,
         type: 'object',
       },
     ],
   },
-  description: 'Specifies the order of the groups.',
+  description: 'Specifies a list of groups for sorting.',
   type: 'array',
 }
-let customGroupsJsonSchema = {
+let deprecatedCustomGroupsJsonSchema = {
   additionalProperties: {
     oneOf: [
       {
@@ -109,13 +115,16 @@ let singleRegexJsonSchema = {
     {
       properties: {
         pattern: {
+          description: 'Regular expression pattern.',
           type: 'string',
         },
         flags: {
+          description: 'Regular expression flags.',
           type: 'string',
         },
       },
       additionalProperties: false,
+      required: ['pattern'],
       // https://github.com/azat-io/eslint-plugin-perfectionist/pull/490#issuecomment-2720969705
       // Uncomment the code below in the next major version (v5)
       // To uncomment: required: ['pattern'],
@@ -149,25 +158,30 @@ let partitionByCommentJsonSchema = {
     {
       properties: {
         block: {
+          description: 'Enables specific block comments to separate the nodes.',
           oneOf: allowedPartitionByCommentJsonSchemas,
         },
         line: {
+          description: 'Enables specific line comments to separate the nodes.',
           oneOf: allowedPartitionByCommentJsonSchemas,
         },
       },
       additionalProperties: false,
+      minProperties: 1,
       type: 'object',
     },
   ],
   description:
-    'Allows to use comments to separate members into logical groups.',
+    'Enables the use of comments to separate the nodes into logical groups.',
 }
 let partitionByNewLineJsonSchema = {
   description:
-    'Allows to use newlines to separate the nodes into logical groups.',
+    'Enables the use of newlines to separate the nodes into logical groups.',
   type: 'boolean',
 }
 let buildUseConfigurationIfJsonSchema = ({ additionalProperties } = {}) => ({
+  description:
+    'Specifies filters to match a particular options configuration for a given element to sort.',
   properties: {
     allNamesMatchPattern: regexJsonSchema,
     ...additionalProperties,
@@ -180,7 +194,7 @@ let buildCommonCustomGroupJsonSchemas = ({
 } = {}) => ({
   newlinesInside: {
     description:
-      'Specifies how new lines should be handled between members of the custom group.',
+      'Specifies how to handle new lines between members of the custom group.',
     enum: ['always', 'never'],
     type: 'string',
   },
@@ -219,6 +233,7 @@ let buildCustomGroupsArrayJsonSchema = ({
         },
         description: 'Custom group block.',
         additionalProperties: false,
+        required: ['groupName'],
         type: 'object',
       },
       {
@@ -230,11 +245,12 @@ let buildCustomGroupsArrayJsonSchema = ({
         },
         description: 'Custom group.',
         additionalProperties: false,
+        required: ['groupName'],
         type: 'object',
       },
     ],
   },
-  description: 'Specifies custom groups.',
+  description: 'Defines custom groups to match specific members.',
   type: 'array',
 })
 let buildCustomGroupModifiersJsonSchema = modifiers => ({
@@ -257,7 +273,7 @@ exports.buildCustomGroupSelectorJsonSchema = buildCustomGroupSelectorJsonSchema
 exports.buildCustomGroupsArrayJsonSchema = buildCustomGroupsArrayJsonSchema
 exports.buildUseConfigurationIfJsonSchema = buildUseConfigurationIfJsonSchema
 exports.commonJsonSchemas = commonJsonSchemas
-exports.customGroupsJsonSchema = customGroupsJsonSchema
+exports.deprecatedCustomGroupsJsonSchema = deprecatedCustomGroupsJsonSchema
 exports.groupsJsonSchema = groupsJsonSchema
 exports.newlinesBetweenJsonSchema = newlinesBetweenJsonSchema
 exports.partitionByCommentJsonSchema = partitionByCommentJsonSchema
diff --git a/dist/utils/get-comment-after.js b/dist/utils/get-comment-after.js
deleted file mode 100644
index ce6a652d1714a712ceef2f18a9f7b9113d6ac6f8..0000000000000000000000000000000000000000
diff --git a/dist/utils/get-comments-before.js b/dist/utils/get-comments-before.js
index 32dd009f530ca8ed0bd558a6d6c13c4ccd1f6e19..090a8843c4f8ff439d39d88c73ad29a09387f712 100644
--- a/dist/utils/get-comments-before.js
+++ b/dist/utils/get-comments-before.js
@@ -1,7 +1,7 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
 let getCommentsBefore = ({ tokenValueToIgnoreBefore, sourceCode, node }) => {
-  let commentsBefore = getCommentsBeforeNodeOrToken(sourceCode, node)
+  let commentsBefore = getRelevantCommentsBeforeNodeOrToken(sourceCode, node)
   let tokenBeforeNode = sourceCode.getTokenBefore(node)
   if (
     commentsBefore.length > 0 ||
@@ -11,15 +11,20 @@ let getCommentsBefore = ({ tokenValueToIgnoreBefore, sourceCode, node }) => {
   ) {
     return commentsBefore
   }
-  return getCommentsBeforeNodeOrToken(sourceCode, tokenBeforeNode)
+  return getRelevantCommentsBeforeNodeOrToken(sourceCode, tokenBeforeNode)
 }
-let getCommentsBeforeNodeOrToken = (source, node) =>
-  source.getCommentsBefore(node).filter(comment => {
-    let tokenBeforeComment = source.getTokenBefore(comment)
-    return (
-      (tokenBeforeComment == null
-        ? void 0
-        : tokenBeforeComment.loc.end.line) !== comment.loc.end.line
-    )
-  })
+let getRelevantCommentsBeforeNodeOrToken = (source, node) =>
+  source
+    .getCommentsBefore(node)
+    .filter(comment => !isShebangComment(comment))
+    .filter(comment => {
+      let tokenBeforeComment = source.getTokenBefore(comment)
+      return (
+        (tokenBeforeComment == null
+          ? void 0
+          : tokenBeforeComment.loc.end.line) !== comment.loc.end.line
+      )
+    })
+let isShebangComment = comment =>
+  comment.type === 'Shebang' || comment.type === 'Hashbang'
 exports.getCommentsBefore = getCommentsBefore
diff --git a/dist/utils/get-group-number.js b/dist/utils/get-group-index.js
similarity index 83%
rename from dist/utils/get-group-number.js
rename to dist/utils/get-group-index.js
index 8e3a38808c0d0f58deda59c8c1c0e68e6a047f89..481ab1168520621c1c637e2a9c2fa4c8424f60f3 100644
--- a/dist/utils/get-group-number.js
+++ b/dist/utils/get-group-index.js
@@ -1,6 +1,6 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
-let getGroupNumber = (groups, node) => {
+let getGroupIndex = (groups, node) => {
   for (let max = groups.length, i = 0; i < max; i++) {
     let currentGroup = groups[i]
     if (
@@ -14,4 +14,4 @@ let getGroupNumber = (groups, node) => {
   }
   return groups.length
 }
-exports.getGroupNumber = getGroupNumber
+exports.getGroupIndex = getGroupIndex
diff --git a/dist/utils/get-newlines-errors.js b/dist/utils/get-newlines-between-errors.js
similarity index 87%
rename from dist/utils/get-newlines-errors.js
rename to dist/utils/get-newlines-between-errors.js
index f423cd647d299c3ce31255edddb29cb123e3a8fe..41752093d5db7093cc9bea7cf2755450442595e3 100644
--- a/dist/utils/get-newlines-errors.js
+++ b/dist/utils/get-newlines-between-errors.js
@@ -2,13 +2,13 @@
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
 const getNewlinesBetweenOption = require('./get-newlines-between-option.js')
 const getLinesBetween = require('./get-lines-between.js')
-let getNewlinesErrors = ({
+let getNewlinesBetweenErrors = ({
   newlinesBetweenValueGetter,
   missedSpacingError,
   extraSpacingError,
+  rightGroupIndex,
+  leftGroupIndex,
   sourceCode,
-  rightNum,
-  leftNum,
   options,
   right,
   left,
@@ -26,7 +26,7 @@ let getNewlinesErrors = ({
           right,
           left,
         })) ?? newlinesBetween
-  if (leftNum > rightNum) {
+  if (leftGroupIndex > rightGroupIndex) {
     return []
   }
   let numberOfEmptyLinesBetween = getLinesBetween.getLinesBetween(
@@ -48,4 +48,4 @@ let getNewlinesErrors = ({
   }
   return []
 }
-exports.getNewlinesErrors = getNewlinesErrors
+exports.getNewlinesBetweenErrors = getNewlinesBetweenErrors
diff --git a/dist/utils/get-newlines-between-option.js b/dist/utils/get-newlines-between-option.js
index e5d4cb4ae40dce1c48d6588253e55438d8f6d567..4c1dcc570546e8465dd139a2fa593b9092922da0 100644
--- a/dist/utils/get-newlines-between-option.js
+++ b/dist/utils/get-newlines-between-option.js
@@ -1,13 +1,10 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
 const isNewlinesBetweenOption = require('./is-newlines-between-option.js')
-const getGroupNumber = require('./get-group-number.js')
+const getGroupIndex = require('./get-group-index.js')
 let getNewlinesBetweenOption = ({ nextSortingNode, sortingNode, options }) => {
-  let nodeGroupNumber = getGroupNumber.getGroupNumber(
-    options.groups,
-    sortingNode,
-  )
-  let nextNodeGroupNumber = getGroupNumber.getGroupNumber(
+  let nodeGroupNumber = getGroupIndex.getGroupIndex(options.groups, sortingNode)
+  let nextNodeGroupNumber = getGroupIndex.getGroupIndex(
     options.groups,
     nextSortingNode,
   )
diff --git a/dist/utils/has-partition-comment.js b/dist/utils/has-partition-comment.js
deleted file mode 100644
index e4bc0ce03749cb218cb5c5fc71240399010efa27..0000000000000000000000000000000000000000
diff --git a/dist/utils/make-fixes.js b/dist/utils/make-fixes.js
index 4d43104f65c5d772a43f3004fbca35a7b65b569c..63ad45fb5984def9fb5e39b3e4516fa74817a1a8 100644
--- a/dist/utils/make-fixes.js
+++ b/dist/utils/make-fixes.js
@@ -1,7 +1,7 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
+const makeNewlinesBetweenFixes = require('./make-newlines-between-fixes.js')
 const makeCommentAfterFixes = require('./make-comment-after-fixes.js')
-const makeNewlinesFixes = require('./make-newlines-fixes.js')
 const makeOrderFixes = require('./make-order-fixes.js')
 let makeFixes = ({
   ignoreFirstNodeHighestBlockComment,
@@ -33,7 +33,7 @@ let makeFixes = ({
   ) {
     return [...orderFixes, ...commentAfterFixes]
   }
-  let newlinesFixes = makeNewlinesFixes.makeNewlinesFixes({
+  let newlinesFixes = makeNewlinesBetweenFixes.makeNewlinesBetweenFixes({
     options: {
       ...options,
       newlinesBetween: options.newlinesBetween,
diff --git a/dist/utils/make-newlines-fixes.js b/dist/utils/make-newlines-between-fixes.js
similarity index 96%
rename from dist/utils/make-newlines-fixes.js
rename to dist/utils/make-newlines-between-fixes.js
index 89adc31a6ce74c43a2ef606b32b822bb4f6c622c..6a048ccef30f78e6036bd85cfea7cdc9b4d16590 100644
--- a/dist/utils/make-newlines-fixes.js
+++ b/dist/utils/make-newlines-between-fixes.js
@@ -3,7 +3,7 @@ Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
 const getNewlinesBetweenOption = require('./get-newlines-between-option.js')
 const getLinesBetween = require('./get-lines-between.js')
 const getNodeRange = require('./get-node-range.js')
-let makeNewlinesFixes = ({
+let makeNewlinesBetweenFixes = ({
   newlinesBetweenValueGetter,
   sortedNodes,
   sourceCode,
@@ -87,4 +87,4 @@ let addNewlineBeforeFirstNewline = value => {
   return `${value.slice(0, firstNewlineIndex)}
 ${value.slice(firstNewlineIndex)}`
 }
-exports.makeNewlinesFixes = makeNewlinesFixes
+exports.makeNewlinesBetweenFixes = makeNewlinesBetweenFixes
diff --git a/dist/utils/make-single-node-comment-after-fixes.js b/dist/utils/make-single-node-comment-after-fixes.js
index 8720282ad2ba5c2e5f011789aab163909df5f005..20b345d180b1e18b047e6796705c9a22ef371fb6 100644
--- a/dist/utils/make-single-node-comment-after-fixes.js
+++ b/dist/utils/make-single-node-comment-after-fixes.js
@@ -1,13 +1,12 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
-const getCommentAfter = require('./get-comment-after.js')
 let makeSingleNodeCommentAfterFixes = ({
   sortedNode,
   sourceCode,
   fixer,
   node,
 }) => {
-  let commentAfter = getCommentAfter.getCommentAfter(sortedNode, sourceCode)
+  let commentAfter = getCommentAfter(sortedNode, sourceCode)
   let areNodesOnSameLine = node.loc.start.line === sortedNode.loc.end.line
   if (!commentAfter || areNodesOnSameLine) {
     return []
@@ -28,4 +27,19 @@ let makeSingleNodeCommentAfterFixes = ({
   )
   return fixes
 }
+let getCommentAfter = (node, source) => {
+  let token = source.getTokenAfter(node, {
+    filter: ({ value, type }) =>
+      type !== 'Punctuator' || ![',', ';', ':'].includes(value),
+    includeComments: true,
+  })
+  if (
+    ((token == null ? void 0 : token.type) === 'Block' ||
+      (token == null ? void 0 : token.type) === 'Line') &&
+    node.loc.end.line === token.loc.end.line
+  ) {
+    return token
+  }
+  return null
+}
 exports.makeSingleNodeCommentAfterFixes = makeSingleNodeCommentAfterFixes
diff --git a/dist/utils/report-all-errors.js b/dist/utils/report-all-errors.js
index b3797cdc9fff45b32512566312f8c8307a8dea99..78e07aa2ee604bcc19c26543e6a1e420a5c6967c 100644
--- a/dist/utils/report-all-errors.js
+++ b/dist/utils/report-all-errors.js
@@ -2,9 +2,9 @@
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
 const computeNodesInCircularDependencies = require('./compute-nodes-in-circular-dependencies.js')
 const isNodeDependentOnOtherNode = require('./is-node-dependent-on-other-node.js')
+const getNewlinesBetweenErrors = require('./get-newlines-between-errors.js')
 const createNodeIndexMap = require('./create-node-index-map.js')
-const getNewlinesErrors = require('./get-newlines-errors.js')
-const getGroupNumber = require('./get-group-number.js')
+const getGroupIndex = require('./get-group-index.js')
 const reportErrors = require('./report-errors.js')
 const pairwise = require('./pairwise.js')
 let reportAllErrors = ({
@@ -28,12 +28,8 @@ let reportAllErrors = ({
         )
       : /* @__PURE__ */ new Set()
   pairwise.pairwise(nodes, (left, right) => {
-    let leftNumber = options.groups
-      ? getGroupNumber.getGroupNumber(options.groups, left)
-      : 0
-    let rightNumber = options.groups
-      ? getGroupNumber.getGroupNumber(options.groups, right)
-      : 0
+    let leftGroupIndex = getGroupIndex.getGroupIndex(options.groups, left)
+    let rightGroupIndex = getGroupIndex.getGroupIndex(options.groups, right)
     let leftIndex = nodeIndexMap.get(left)
     let rightIndex = nodeIndexMap.get(right)
     let indexOfRightExcludingEslintDisabled =
@@ -57,7 +53,7 @@ let reportAllErrors = ({
         messageIds.push(availableMessageIds.unexpectedDependencyOrder)
       } else {
         messageIds.push(
-          leftNumber === rightNumber ||
+          leftGroupIndex === rightGroupIndex ||
             !availableMessageIds.unexpectedGroupOrder
             ? availableMessageIds.unexpectedOrder
             : availableMessageIds.unexpectedGroupOrder,
@@ -66,23 +62,21 @@ let reportAllErrors = ({
     }
     if (
       options.newlinesBetween &&
-      options.groups &&
       availableMessageIds.missedSpacingBetweenMembers &&
       availableMessageIds.extraSpacingBetweenMembers
     ) {
       messageIds = [
         ...messageIds,
-        ...getNewlinesErrors.getNewlinesErrors({
+        ...getNewlinesBetweenErrors.getNewlinesBetweenErrors({
           options: {
             ...options,
             newlinesBetween: options.newlinesBetween,
-            groups: options.groups,
           },
           missedSpacingError: availableMessageIds.missedSpacingBetweenMembers,
           extraSpacingError: availableMessageIds.extraSpacingBetweenMembers,
           newlinesBetweenValueGetter,
-          rightNum: rightNumber,
-          leftNum: leftNumber,
+          rightGroupIndex,
+          leftGroupIndex,
           sourceCode,
           right,
           left,
diff --git a/dist/utils/report-errors.js b/dist/utils/report-errors.js
index 1549543dbe412ea4f88291e7f01bef8458112a7c..45c3bf4f049508640caf818439a3df56632cd4eb 100644
--- a/dist/utils/report-errors.js
+++ b/dist/utils/report-errors.js
@@ -1,6 +1,5 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
-const toSingleLine = require('./to-single-line.js')
 const makeFixes = require('./make-fixes.js')
 const NODE_DEPENDENT_ON_RIGHT = 'nodeDependentOnRight'
 const RIGHT = 'right'
@@ -42,8 +41,8 @@ let reportErrors = ({
           firstUnorderedNodeDependentOnRight == null
             ? void 0
             : firstUnorderedNodeDependentOnRight.name,
-        [RIGHT]: toSingleLine.toSingleLine(right.name),
-        [LEFT]: toSingleLine.toSingleLine(left.name),
+        [RIGHT]: toSingleLine(right.name),
+        [LEFT]: toSingleLine(left.name),
         [RIGHT_GROUP]: right.group,
         [LEFT_GROUP]: left.group,
       },
@@ -52,6 +51,7 @@ let reportErrors = ({
     })
   }
 }
+let toSingleLine = string => string.replaceAll(/\s{2,}/gu, ' ').trim()
 exports.DEPENDENCY_ORDER_ERROR = DEPENDENCY_ORDER_ERROR
 exports.EXTRA_SPACING_ERROR = EXTRA_SPACING_ERROR
 exports.GROUP_ORDER_ERROR = GROUP_ORDER_ERROR
diff --git a/dist/utils/should-partition.js b/dist/utils/should-partition.js
index 4f87b587dc0bc852025fe01590d5cd012dca5821..df06dd12131c935c0b55d29385145084b0a48c34 100644
--- a/dist/utils/should-partition.js
+++ b/dist/utils/should-partition.js
@@ -1,6 +1,6 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
-const hasPartitionComment = require('./has-partition-comment.js')
+const isPartitionComment = require('./is-partition-comment.js')
 const getCommentsBefore = require('./get-comments-before.js')
 const getLinesBetween = require('./get-lines-between.js')
 let shouldPartition = ({
@@ -12,7 +12,7 @@ let shouldPartition = ({
 }) => {
   let shouldPartitionByComment =
     options.partitionByComment &&
-    hasPartitionComment.hasPartitionComment({
+    hasPartitionComment({
       comments: getCommentsBefore.getCommentsBefore({
         tokenValueToIgnoreBefore,
         node: sortingNode.node,
@@ -29,4 +29,11 @@ let shouldPartition = ({
     getLinesBetween.getLinesBetween(sourceCode, lastSortingNode, sortingNode)
   )
 }
+let hasPartitionComment = ({ partitionByComment, comments }) =>
+  comments.some(comment =>
+    isPartitionComment.isPartitionComment({
+      partitionByComment,
+      comment,
+    }),
+  )
 exports.shouldPartition = shouldPartition
diff --git a/dist/utils/sort-nodes-by-groups.js b/dist/utils/sort-nodes-by-groups.js
index affcf5c548a54cd515bb72c484341fc5f823b269..870f02a5796378acaf80629626d0761eeb16ed27 100644
--- a/dist/utils/sort-nodes-by-groups.js
+++ b/dist/utils/sort-nodes-by-groups.js
@@ -1,6 +1,6 @@
 'use strict'
 Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
-const getGroupNumber = require('./get-group-number.js')
+const getGroupIndex = require('./get-group-index.js')
 const sortNodes = require('./sort-nodes.js')
 let sortNodesByGroups = ({
   ignoreEslintDisabledNodes,
@@ -20,7 +20,7 @@ let sortNodesByGroups = ({
       ignoredNodeIndices.push(index)
       continue
     }
-    let groupNumber = getGroupNumber.getGroupNumber(groups, sortingNode)
+    let groupNumber = getGroupIndex.getGroupIndex(groups, sortingNode)
     nodesByNonIgnoredGroupNumber[groupNumber] ??
       (nodesByNonIgnoredGroupNumber[groupNumber] = [])
     nodesByNonIgnoredGroupNumber[groupNumber].push(sortingNode)
diff --git a/dist/utils/to-single-line.js b/dist/utils/to-single-line.js
deleted file mode 100644
index 24f5256a904e17cbb08ad7a10eead2872d6e2d4b..0000000000000000000000000000000000000000
diff --git a/dist/utils/validate-groups-configuration.js b/dist/utils/validate-groups-configuration.js
deleted file mode 100644
index d42199c22a969916f66d3d2db677c791d9c579b5..0000000000000000000000000000000000000000
